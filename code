MARKET MAKING STRATEGY 

Here we will try to use the Bid ask and try make profit on 3bps margins. Also, we will hedge the position incase our loss amount greater than 5000 USD

Installing Different Packages required for analysis
-yfinance package is used to download historical BTCUSDT data for March 01 2022 to March 03 2022

Also, Pandas data frame is use to prforming different operations on the data

!pip install yfinance python-binance

import pandas as pd

import yfinance as yf

# Inserting ticker information in the dataset
data= yf.Ticker("BTC-USD")
data

Importing Binance package to get data and execute orders

from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager
import pandas as pd


Create the Binance account and get your own apikey, secret key to be used to connect to your account to execute orders

apikey= ' '
secret= ' '

Pulling historical data for the first 3 days of March 2022 and saving it in a data frame.

BTC_historical = data.history(start="2022-03-01", end="2022-03-03", interval="15m")
BTC_historical

Inserting the data in pandas dataframe which helps in performing different operations

data=pd.DataFrame(BTC_historical)

Dropping/Discarding the columns we do not require to perform our task in Hand.
Here we only need Date time, Close and Volume

data.drop(data.columns[[ 0,1,2, 5, 6]], axis = 1, inplace = True)

Crosschecking the datatype and converting them as floats or datetime format for furthere processing of dataframe

data.dtypes

Coding an order function to execute the BUY order and sell or BTC price increasese with 3bps. ALSO, forming a hedge using futures when the pricess falls and our loss amounts to more than 5000 USD.

In this case we have not fed the actual apikey and secret key in the algorithm, to make it work we will have to add those to execute the same.

Also, we can also create a live trading bot with the same code with minor changes to execute the orders automatically.

def placeorder(entry, lookback, open_position=False):
  while True
    df=pd.DataFrame(data)
    lookback =period=df.iloc[-lookback:]
    ret=(lookbackperiod.Close.pct_change() +1).cumprod()-1
    if not open_position:
      if ret[ret.last_valid_index()] > entry:
        order=client.create_order(symbol='BTCUSDT', 
                                  side='BUY'
                                  type='MARKET'
                                  quantity=qty)
        print(order)
        open_position=True
        break
  if open_position:
    while True:
      sincebuy=df.loc[df.Datetime > pd.to_datatime(order['transactionTime'],unit='ms') ]

      if len(sincebuy)>1
      sincebuyret=(sincebuy.Close.pct_change()+1).cumprod()-1
      last_entry=sincebuyret[sincebuyret.last_valid_index()]

      if last_entry>0.03:
      order=client.create_order(symbol='BTCUSDT', 
                                  side='SELL'
                                  type='MARKET'
                                  quantity=qty)
      a1=order
      if last_entry<0 and qty*close> 5000:
      order=client.create_order(symbol='BTC=F', 
                                  side='SELL'
                                  type='MARKET'
                                  quantity=qty)
      
      b2=order

      profit=b2-b1
      df['PROFIT'] = profit
      break

Calculating Gross P&L in basis poits 

df2=pd.DataFrame(df)
df2.groupby((()
    [pd.to_datetime(df.Time).dt.strftime(' %Y'), 'PROFIT']
)['Count'].mean().reset_index(name='Average'))/1000)*volume


Calculating Gross P&L in dollars

df2[SumProfit]=df2[PROFIT].sum(axis = 0, skipna = True)


Calculating Maximum Drawdown

df2[MaximumDrawdown] = df2[PROFIT].min()

Caluculating Average Win P&*L

df2['Avgwin'] = df2.groupby('Time')['PROFIT'].apply(lambda x: x[x>0].mean()).reset_index()]

Caluculating Average Loss P&*L

df2['Avgloss'] = df2.groupby('Time')['PROFIT'].apply(lambda x: x[x<0].mean()).reset_index()]

Calcuating Number of Trades

df2[Numberoftrades]=df2[PROFIT].count()

# THIS ALGORITHM WILL NEED TO BE MANUALLY STOPED, AS IT WILL KEEP ON RUNNING
